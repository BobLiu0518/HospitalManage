#include <stdio.h>  
#include <stdlib.h>  
#include <string.h>  
  
struct birthdate {  
    int year;  
    int month;  
    int date;  
};  
  
typedef struct users {  
    int user_type; // 0管理员 1医生 2患者  
    long long id;  
    char name[20];  
    char password[100];  
    char phone[100];  
    char department[100]; // 若非医生则不填  
    char title[100];      // 若非医生则不填  
    char sex[20];  
    struct birthdate birth;  
    struct users* next; // 指向下一个节点的指针  
} USERS;  
  USERS* user;
// 链表头指针  
USERS* head = NULL;  
  
// 添加节点到链表  
void add_user(USERS* new_user) {  
    if (head == NULL) {  
        head = new_user;  
    } else {  
        USERS* temp = head;  
        while (temp->next != NULL) {  
            temp = temp->next;  
        }  
        temp->next = new_user;  
    }  
}  
int read_user_data() {  
    FILE* fp = fopen("data.txt", "r");  
    if (fp == NULL) {  
        printf("无法打开文件");  
        return -1;  
    }  
  
    int count = 0;  
    USERS* new_user;  
    while (fscanf(fp, "%d", &new_user->user_type) == 1) {  
        new_user = (USERS*)malloc(sizeof(USERS));  
        if (new_user == NULL) {  
            printf( "内存分配失败\n");  
            return 0;
        }  
  
        if (new_user->user_type == 1) {  
            fscanf(fp, " %lld %19s %99s %99s %99s %99s %19s %d %d %d",  
                   &new_user->id, new_user->name, new_user->password,  
                   new_user->phone, new_user->department, new_user->title,  
                   new_user->sex, &new_user->birth.year, &new_user->birth.month,  
                   &new_user->birth.date);  
        } else {  
            fscanf(fp, " %lld %19s %99s %99s %99s %d %d %d",  
                   &new_user->id, new_user->name, new_user->password,  
                   new_user->phone, new_user->sex, &new_user->birth.year,  
                   &new_user->birth.month, &new_user->birth.date);  
        }  
        add_user(new_user);  
        count++;  
    }  
  
    fclose(fp);  
    return count;  
}  
int login() {  
    long long input_id;  
    char input_password[100];  
  
    printf("请输入用户名: ");  
    scanf("%lld", &input_id);  
    printf("请输入密码: ");  
    scanf("%99s", input_password);  
  
    USERS* temp = head;  
    while (temp != NULL) {  
        if (temp->id == input_id && strcmp(temp->password, input_password) == 0) {  
            printf("登录成功!\n");  
            return 1;  
        }  
        temp = temp->next;  
    }  
  
    printf("用户名或密码错误!\n");  
    return 0;  
}  
  
  
void free_users() {  
    USERS* temp;  
    while (head != NULL) {  
        temp = head;  
        head = head->next;  
        free(temp);  
    }  
}  
 USERS* find_user_by_id(long long input_id) {  
    USERS* temp = head;  
    while (temp != NULL) {  
        if (temp->id == input_id) {  
            return temp;  
        }  
        temp = temp->next;  
    }  
    return NULL;  
}  
  
   
void display_user_info(USERS* user) {  
    if (user == NULL) {  
        printf("未找到用户\n");  
        return;  
    }  
  
    printf("用户ID: %lld\n", user->id);  
    printf("用户名: %s\n", user->name);  
    // printf("密码: %s\n", user->password);  // 实际应用中不打印密码  
    printf("电话: %s\n", user->phone);  
    printf("性别: %s\n", user->sex);  
    printf("生日: %d-%d-%d\n", user->birth.year, user->birth.month, user->birth.date);  
  
    if (user->user_type == 1) {  
        printf("部门: %s\n", user->department);  
        printf("职称: %s\n", user->title);  
    }  
}  
  
  
int delete_user(long long input_id) {  
    USERS *temp = head, *prev = NULL;  
    while (temp != NULL) {  
        if (temp->id == input_id) {  
            if (prev == NULL) {  
                head = temp->next;  
            } else {  
                prev->next = temp->next;  
            }  
            free(temp);  
            return 0;  
        }  
        prev = temp;  
        temp = temp->next;  
    }  
    printf("未找到用户ID为%lld的用户\n", input_id);  
    return -1;  
}  
   
int main() {  
    read_user_data();    
     head = NULL;  
    int choice;  
  
    while (1) {  
        printf("\nChoose an option:\n");  
        printf("1. Add person\n");   
        printf("2. Find person\n");  
        printf("3. login\n");  
        printf("4. Delete person\n");  
        printf("5. Exit\n");  
        scanf("%d", &choice);  
  
        switch (choice) {  
            case 1:  
            	USERS* new_user;
                add_user(new_user);  
                break;  
            case 2:  
  
                long long id_to_find;  
    			printf("请输入要查找的用户ID: ");  
    			scanf("%lld", &id_to_find);  
  
   				 user = find_user_by_id(id_to_find);  
    			if (user != NULL) {  
       			display_user_info(user);  
    }    
	 			free_users();
                break;  
            case 3:
            	login();  
            	break; 
            case 4:  
            long long id_to_delete;  
    		printf("请输入要删除的用户ID: ");  
    		scanf("%lld", &id_to_delete);  
  			delete_user(id_to_delete);
    		if (delete_user(id_to_delete) == 0) 
			{  
       		 printf("用户删除成功\n");  
    		}  
                break;  
            case 5:  
                printf("退出程序 \n");  
               return 0;   
            default:  
                printf("Invalid choice, please try again.\n");  
        }  
    }  
  return 0;
      
}